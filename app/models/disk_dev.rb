# A #DiskDev (disk device) references a virtual hard disk image on
# your host system. Each #DiskDev belongs to a #Profile, under which
# it will be made available - No provisions are (yet) made to allow
# for more than one #Profile per #DiskDev.
#
# Note that #DiskDevs are ordered in each #Profile according to their
# #position. the devices will be filled in in order (no "holes" are
# left - i.e. IDE disks will be filled in the following order: Primary
# master, primary slave, secondary master, secondary slave). Remember
# that each #DiskDev specifies its MediaType and DiskType; it is
# recommended that, should you emulate an IDE bus, the most intensive
# devices be set as master devices - This might involve i.e. creating
# a dummy primary slave disk.
# 
# Note that, unless the #Profile is specified to be acting in
# maintenance mode, its #DiskDev instances will be used in _snapshot_
# mode.
#
# A #DiskDev will also be related to its #DiskType and #MediaType.
#
# === Attributes
#
# [name] A human-readable name describing this image
#
# [path] The path to where this file is located, on the host server's
#        filesystem
#
# [disk_type] The #DiskType this #DiskDev should be (usually IDE)
#
# [media_type] The #MediaType this #DiskDev should be (usually Disk,
#              might also be CD-Rom)
class DiskDev < ActiveRecord::Base
  acts_as_list :scope => :profile
  belongs_to :profiles
  belongs_to :disk_type
  belongs_to :media_type

  validates_presence_of :name
  validates_uniqueness_of :name

  # Produces the device string to be given to KVM to refer to this
  # disk device. Any extra options passed will be appended to the
  # generated string.
  def dev_string(opts)
    '-drive index=%d,media=%s,if=%s%s,file=%s' % 
      [position, media_type.name, disk_type.name, extra_params(opts), path]
  end

  protected
  # Appends optional (or detected) parameters (usually to the device
  # string generated by #dev_string)
  def extra_params(opts)
    res = opts
    # SCSI and virtio devices require adding explicitly 'boot=on'
    res << ',boot=on' if media_type.name =~ /^(scsi|virtio)$/
    res
  end
end
